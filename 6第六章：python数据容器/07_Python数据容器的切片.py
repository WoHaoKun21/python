"""
    Python数据容器的切片
        1、序列：序列是指内容连续、有序，可以使用下标索引的一类数据容器，例：列表、元组、字符串，都可以视为序列
        2、序列常用的操作：切片————从一个序列中，取出一个子序列
            ① 切片语法：序列[起始下标:结束下标:步长]，表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新的序列
                * 起始下标：起始下标表示从何处开始，可以留空，留空视作从头开始
                * 结束下标：结束下标表示何处结束，可以留空，留空视作截取到结尾
                * 步长：步长表示，依次取元素的间隔。为1表示，一个个取元素；为2表示，每次跳过一个元素取出；为N表示每次跳过N-1个元素取
            ② 注意：切片操作不会影响序列本身，而是会得到一个新的序列，因为字符串和元组是不支持修改的
"""
# # 一、对list进行切片，从1开始，4结束，步长为1
# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# new_my_list = my_list[1:4:1]  # 对列表进行切片操作：起始下标、结束下标、步长，步长默认为1，可以省略
# print(f"通过切片得到的新列表为：{new_my_list}")

# # 二、对tuple进行切片，从头开始，到最后结束，步长为1
# my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)
# new_my_tuple = my_tuple[::1]  # 对元组从头到最后进行切片操作，步长为1，步长默认为1，可以省略
# # new_my_tuple = my_tuple[:]  # 简写
# print(f"对元组从头到尾进行切片后的结果为：{new_my_tuple}")

# # 三、对str进行切片，从头开始，到最后结束，步长为2
# my_str = "123456789"
# new_my_str = my_str[::2]  # 对字符串从头到尾进行切片，步长为2
# print(f"将字符串从头到尾切片，步长为2的结果为：{new_my_str}")

# # 四、对str进行切片，从头开始，到最后结束，步长为-1
# my_str = "123456789"
# new_my_str = my_str[::-1]  # 对字符串从头到尾进行切片，步长为-1，相当于序列反转
# print(f"将字符串从头到尾切片，步长为-1的结果为：{new_my_str}")

# # 五、对列表进行切片，从3开始，到1结束，步长为-1
# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# new_my_list = my_list[3:1:-1]  # 对列表进行切片操作：起始下标、结束下标、步长
# print(f"通过切片得到的新列表为：{new_my_list}")

# # 六、对元素进行切片，从头开始，到尾结束，步长为-2
# my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)
# new_my_tuple = my_tuple[::-2]  # 对元组从头到最后进行切片操作，步长为-2
# print(f"对元组从头到尾进行切片后的结果为：{new_my_tuple}")

# 练习案例：将字符串“万过薪月，学教松轻站B来到，nohtyP学”，得到“来B站轻松教学”
my_str = "万过薪月，学教松轻站B来，nohtyP学"
new_my_str = my_str[::-1].split("，")[1].replace("到", "")
print(new_my_str)
